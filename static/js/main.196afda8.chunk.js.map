{"version":3,"sources":["Stock.js","App.js","serviceWorker.js","index.js"],"names":["Stock","props","changeStockSymbol","e","setState","StockSymbol","target","value","fetchStockFunction","event","preventDefault","fetchStock","pointerToThis","console","log","API_Call","state","stockChartXValuesFunction","stockChartYValuesFunction","fetch","then","response","json","data","key","push","stockChartXValues","stockChartYValues","this","action","type","onChange","placeholder","onClick","x","y","mode","marker","color","layout","width","height","title","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sSAwFeA,E,YApFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZC,YAAaF,EAAEG,OAAOC,SAXP,EAenBC,mBAAqB,SAACC,GACpBA,EAAMC,iBACa,eACLC,cAlBG,EAyBnBA,WAAa,WACX,IAAMC,EAAa,eACnBC,QAAQC,IAAIF,GACZ,IACIG,EAAQ,wFAAoFH,EAAcI,MAAMX,YAAxG,mBADI,oBAEZY,EAA4B,GAC5BC,EAA4B,GAEhCC,MAAMJ,GACHK,KACC,SAASC,GACP,OAAOA,EAASC,SAGnBF,KACC,SAASG,GAGP,IAAK,IAAIC,KAFTX,QAAQC,IAAIS,GAEIA,EAAK,+BACnBN,EAA0BQ,KAAKD,GAC/BN,EAA0BO,KAAKF,EAAK,+BAA+BC,GAAK,YAI1EZ,EAAcR,SAAS,CACrBsB,kBAAmBT,EACnBU,kBAAmBT,OAjD3B,EAAKF,MAAQ,CACXX,YAAa,OACbqB,kBAAmB,GACnBC,kBAAmB,IALJ,E,iFAsBjBC,KAAKjB,e,+BAoCL,OACE,6BACE,4CAEA,0BAAMkB,OAAO,IACX,2BAAOC,KAAK,OAAOvB,MAAOqB,KAAKZ,MAAMX,YAAa0B,SAAUH,KAAK1B,kBAAmB8B,YAAY,+BAChG,4BAAQC,QAASL,KAAKpB,oBAAtB,iBAGF,kBAAC,IAAD,CACEe,KAAM,CACJ,CACEW,EAAGN,KAAKZ,MAAMU,kBACdS,EAAGP,KAAKZ,MAAMW,kBACdG,KAAM,UACNM,KAAM,gBACNC,OAAQ,CAACC,MAAO,SAGpBC,OAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,yBAA2Bd,KAAKZ,MAAMX,oB,GA9ErEsC,IAAMC,W,MCSXC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.196afda8.chunk.js","sourcesContent":["import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\nclass Stock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      StockSymbol: 'AMZN',\r\n      stockChartXValues: [],\r\n      stockChartYValues: []\r\n    }\r\n  }\r\n\r\n  changeStockSymbol = (e) => {\r\n    this.setState({\r\n      StockSymbol: e.target.value\r\n    });\r\n  }\r\n\r\n  fetchStockFunction = (event) => {\r\n    event.preventDefault();\r\n    const pointerToThis = this;\r\n    pointerToThis.fetchStock();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchStock();\r\n  }\r\n\r\n  fetchStock = () => {\r\n    const pointerToThis = this;\r\n    console.log(pointerToThis);\r\n    const API_KEY = 'HGJWFG4N8AQ66ICD';\r\n    let API_Call = `https://www.alphavantage.co/query?function=TIME_SERIES_WEEKLY_ADJUSTED&symbol=${pointerToThis.state.StockSymbol}&apikey=${API_KEY}`;\r\n    let stockChartXValuesFunction = [];\r\n    let stockChartYValuesFunction = [];\r\n\r\n    fetch(API_Call)\r\n      .then(\r\n        function(response) {\r\n          return response.json();\r\n        }\r\n      )\r\n      .then(\r\n        function(data) {\r\n          console.log(data);\r\n\r\n          for (var key in data['Weekly Adjusted Time Series']) {\r\n            stockChartXValuesFunction.push(key);\r\n            stockChartYValuesFunction.push(data['Weekly Adjusted Time Series'][key]['1. open']);\r\n          }\r\n\r\n          // console.log(stockChartYValuesFunction);\r\n          pointerToThis.setState({\r\n            stockChartXValues: stockChartXValuesFunction,\r\n            stockChartYValues: stockChartYValuesFunction\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Stock Market</h1>\r\n\r\n        <form action=\"\">\r\n          <input type=\"text\" value={this.state.StockSymbol} onChange={this.changeStockSymbol} placeholder='Enter stock symbol here...' />\r\n          <button onClick={this.fetchStockFunction}>Lookup Stock</button>\r\n        </form>\r\n\r\n        <Plot\r\n          data={[\r\n            {\r\n              x: this.state.stockChartXValues,\r\n              y: this.state.stockChartYValues,\r\n              type: 'scatter',\r\n              mode: 'lines+markers',\r\n              marker: {color: 'red'},\r\n            },\r\n          ]}\r\n          layout={{width: 720, height: 440, title: 'Stock Market Data for ' + this.state.StockSymbol}}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Stock;","import React from 'react';\nimport Stock from './Stock';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Stock></Stock>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}